import turtle
import random
import math

t = turtle.Turtle()
t.speed(0)
logs = []

frame = {
    "left": -250,
    "right": 250,
    "top": 250,
    "bottom": -250
}

# –ú–∞–ª—é—î–º–æ —Ä–∞–º–∫—É
t.penup()
t.goto(frame["left"], frame["bottom"])
t.pendown()
t.goto(frame["left"], frame["top"])
t.goto(frame["right"], frame["top"])
t.goto(frame["right"], frame["bottom"])
t.goto(frame["left"], frame["bottom"])

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è
def teleport_to_random():
    """–¢–µ–ª–µ–ø–æ—Ä—Ç—É—î –≤ —Ç–æ—á–∫—É, —è–∫–∞ –Ω–µ –±–ª–∏–∑—å–∫–æ –¥–æ –∫—Ä–∞—ó–≤ —ñ —â–µ –Ω–µ –≤—ñ–¥–≤—ñ–¥–∞–Ω–∞"""
    max_attempts = 100
    for _ in range(max_attempts):
        x = random.randint(-220, 220)
        y = random.randint(-220, 220)
        pos = (x, y)
        if pos not in logs:
            t.penup()
            t.goto(x, y)
            t.setheading(random.choice([0, 90, 180, 270]))
            t.pendown()
            print(f"üöÄ –¢–µ–ª–µ–ø–æ—Ä—Ç —É: {pos}")
            return True
    print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–ª—å–Ω—É —Ç–æ—á–∫—É –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç—É")
    return False

teleport_to_random()

# –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
while True:
    # –û–±—á–∏—Å–ª—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–æ–∑–∏—Ü—ñ—é
    heading = math.radians(t.heading())
    next_x = t.xcor() + 10 * math.cos(heading)
    next_y = t.ycor() + 10 * math.sin(heading)
    next_pos = (round(next_x, 2), round(next_y, 2))

    if -231 <= next_x <= 229 and -231 <= next_y <= 229 and next_pos not in logs:
        t.color("black")
        t.forward(10)
        logs.append(next_pos)
    else:
        # –ü—Ä–æ–±—É—î–º–æ 4 —Ä–∞–∑–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è —ñ —à—É–∫–∞—Ç–∏ –Ω–æ–≤–∏–π –Ω–∞–ø—Ä—è–º
        turned = False
        for _ in range(4):
            t.left(90)
            heading = math.radians(t.heading())
            test_x = t.xcor() + 10 * math.cos(heading)
            test_y = t.ycor() + 10 * math.sin(heading)
            test_pos = (round(test_x, 2), round(test_y, 2))
            if -231 <= test_x <= 229 and -231 <= test_y <= 229 and test_pos not in logs:
                turned = True
                break

        if not turned:
            # –Ø–∫—â–æ –≤—Å—ñ 4 –Ω–∞–ø—Ä—è–º–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ ‚Äî —Ç–µ–ª–µ–ø–æ—Ä—Ç
            teleport_to_random()
