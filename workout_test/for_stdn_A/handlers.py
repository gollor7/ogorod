import logging

import re

from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keybords import back_to_stdn_kb

logging.basicConfig(level=logging.DEBUG)
router = Router()
import keybords as kb


static_dynamic = {
    #stdn - —Å—Ç–∞—Ç–æ-–¥–∏–Ω–∞–º—ñ–∫–∞, –ê - —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    "stdn_A": {"–í–∏–¥–µ–ª–∫–∞ - –∫–∞–ø—ñ—Ç–∞–Ω—Å—å–∫–∏–π": 1, "–ü—ñ–¥–π–æ–º –ª–∞—Å—Ç—ñ–≤–∫–∏ –∑ –æ–¥–Ω—ñ—î—é –Ω–æ–≥–æ—é –¥–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω–∏": 1, "–ü—ñ–¥–π–æ–º –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–æ–º": 1, "–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤ –≤–∏—Å—ñ –∑ 1 –Ω–æ–≥–æ—é": 1,
                "–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤ –ª–∞—Å—Ç—ñ–≤—Ü—ñ –∑ 1 –Ω–æ–≥–æ—é": 1, "–ü—ñ–¥–π–æ–º –ª–∞—Å—Ç—ñ–≤–∫–∏ –¥–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω–∏": 2, "–í–∏—Ö—ñ–¥ –∑ –∂–∞–±–∫–∏ –≤ —Å—Ç—ñ–π–∫—É": 2, "–í–∏—Ö—ñ–¥ –Ω–∞ –æ–¥–Ω—É": 2, "–î—Ä—É–∫–∞—Ä—å—Å–∫–∞ –º–∞—à–∏–Ω–∫–∞": 2,
                "–í–∏—Ö—ñ–¥ –°–µ–º–µ–Ω–æ–≤–∞": 2, "–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤ –ª–∞—Å—Ç—ñ–≤—Ü—ñ –Ω–æ–≥–∏ —à–∏—Ä–æ–∫–æ (>45 –≥—Ä—É–¥—É—Å—ñ–≤ –º—ñ–∂ –Ω–æ–≥–∞–º–∏)": 2, "–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤ –ø–µ—Ä–µ–¥–Ω—å–æ–º—É –≤–∏—Å—ñ –Ω–æ–≥–∏ —à–∏—Ä–æ–∫–æ (>45 –≥—Ä—É–¥—É—Å—ñ–≤ –º—ñ–∂ –Ω–æ–≥–∞–º–∏)": 2,
                "–ú–∞—Ö–æ–≤–∏–π –≤–∏—Ö—ñ–¥ –≤ —Å—Ç—ñ–π–∫—É": 3, "–û—Ñ—ñ—Ü–µ—Ä—Å—å–∫–∏–π –≤–∏—Ö—ñ–¥": 3, "–ö—Ä–∞–±—ñ–∫": 3, "–ú–µ—Ç–µ–ª–∏–∫": 3, "–ö–∞–ø—ñ—Ç–∞–Ω—Å—å–∫–∏–π": 3, "–†—É—à–Ω–∏–∫": 3,
                "–û–ø—É—Å–∫–∞–Ω–Ω—è –∑—ñ —Å—Ç—ñ–π–∫–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π —É–ø–æ—Ä": 3, "–ü—ñ–¥–π–æ–º –ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–∏—Å—É –¥–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω–∏": 3, "–°–∏–ª–æ–≤–∏–π –≤–∏—Ö—ñ–¥ –≤ —Å—Ç—ñ–π–∫—É": 4, "–í–∏—Ö—ñ–¥ –Ω–∞ –¥–≤—ñ ": 4,
                "–í–∏—Ö—ñ–¥ –Ω–∞ –¥–≤—ñ –∫—ñ–ª—å—Ü—è": 4, "–ü—ñ–¥–π–æ–º –∑ –∫—É—Ç–∞ –≤ –ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏—Å": 4, "–Ü—Å–ø–∞–Ω—Å—å–∫–∏–π –≤–∏—Ö—ñ–¥": 4, "–í–∏—Ö—ñ–¥ –ø—Ä–∏–Ω—Ü–∞ –Ω–∞ –æ–¥–Ω—É": 4, "–°–∏–ª–æ–≤–∏–π –æ–±–µ—Ä—Ç –≤–ø–µ—Ä–µ–¥ –≤ –∑–∞–¥–Ω—å–æ–º—É —É–ø–æ—Ä—ñ": 4,
                "–°–ø—ñ—á–∞–≥ –Ω–æ–≥–∏ –Ω–∞—Ä—ñ–∑–Ω–æ": 4, "–†—É—à–Ω–∏–∫ –∑–∞–¥–Ω—ñ–π": 4, "–ü—ñ–¥–π–æ–º –∑ –≤–∏—Å—É —Å–∏–ª–æ—é –≤ –ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏—Å": 4, "–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤ –ª–∞—Å—Ç—ñ–≤—Ü—ñ—ñ –Ω–æ–≥–∏ —à–∏—Ä–æ–∫–æ (<45 –≥—Ä—É–¥—É—Å—ñ–≤ –º—ñ–∂ –Ω–æ–≥–∞–º–∏)": 4,
                "–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤ –ø–µ—Ä–µ–¥–Ω—å–æ–º—É –≤–∏—Å—ñ –Ω–æ–≥–∏ —à–∏—Ä–æ–∫–æ (<45 –≥—Ä—É–¥—É—Å—ñ–≤ –º—ñ–∂ –Ω–æ–≥–∞–º–∏)": 4, "–ö–∞–ª—ñ—Å—Ç–æ": 5, "–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤ –∑–∞–¥–Ω—å–æ–º—É –≤–∏—Å—ñ (—Å–µ—Ä–µ–¥–Ω—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É–∫)": 5,
                "–¶–∞—Ä—Å—å–∫–∏–π (–∞–Ω–≥–µ–ª –Ω–∞ –æ–¥–Ω—É)": 5, "–ü—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤ –ø—Ä–∞–ø–æ—Ä—ñ": 5, "–û–ø—É—Å–∫–∞–Ω–Ω—è –∑—ñ —Å—Ç—ñ–π–∫–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç –Ω–æ–≥–∏ –Ω–∞—Ä—ñ–∑–Ω–æ": 5, "–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –≤ —Å—Ç—ñ–π—Ü—ñ –Ω–∞ —Ä—É–∫–∞—Ö": 5,
                "–ü–µ—Ä–µ–∫–∞—Ç –≤ –ø—Ä–∞–ø–æ—Ä—ñ": 5, "–û–ø—É—Å–∫–∞–Ω–Ω—è –∑ —É–ø–æ—Ä–∞ –ø—ñ–¥ —Ç—É—Ä–Ω—ñ–∫–æ–º –≤ –ª–∞—Å—Ç—ñ–≤–∫—É": 5, "–í–∏—Ö—ñ–¥ –∑-–ø—ñ–¥ –∫—ñ–ª–µ—Ü—å": 5
                }
}

#stdn_complications = ["–∫–∞–ø—ñ—Ç–∞–Ω—Å—å–∫–∏–π:17", '–ü—ñ–¥–π–æ–º –∑ –∫—É—Ç–∞ –≤ –ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏—Å:24', '–°–ø—ñ—á–∞–≥ –Ω–æ–≥–∏ –Ω–∞—Ä—ñ–∑–Ω–æ:28', '–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è –≤ —Å—Ç—ñ–π—Ü—ñ –Ω–∞ —Ä—É–∫–∞—Ö:38']

message_plus_minus = []

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply('–í—ñ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ñ –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –æ—á–æ–∫ —Ñ—Ä—ñ—Å—Ç–∞–π–ª—É –∑ —Å—Ç—Ä—ñ—Ç –≤–æ—Ä–∫–∞—É—Ç—É. –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /fs_calc —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.')

@router.message(Command('fs_calc'))
async def fs_calc_start(message: Message):
    await message.reply(
        f'–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º:'
        f'\n1. –Ø–∫—â–æ –∞—Ç–ª–µ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ –∫–æ–º–±—É, –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ö—ñ–Ω–µ—Ü—å –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó".'
        f'\n2. –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –µ–ª–µ–º–µ–Ω—Ç—É —â–æ –≤–∏–∫–æ–Ω–∞–≤ –∞—Ç–ª–µ—Ç –∑\'—è–≤–∏—Ç—å—Å—è –¥–æ–¥–∞—Ç–∫–æ–≤–µ –º–µ–Ω—é –∑ –º–æ–∂–ª–∏–≤–∏–º–∏ —É—Å–∫–ª–∞–¥–Ω–µ–Ω–Ω—è–º–∏, –∞–ª–µ —è–∫—â–æ –≤–æ–Ω–∏ —ñ–Ω—Å—É—é—Ç—å.'
        f' –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –í–∏—Ö—ñ–¥ –∑ –∂–∞–±–∫–∏ –≤ —Å—Ç—ñ–π–∫—É –Ω–µ –º–∞—î —É—Å–∫–ª–∞–¥–Ω–µ–Ω—å, —Ç–æ–º—É –º–µ–Ω—é –Ω–µ –∑\'—è–≤–∏—Ç—å—Å—è. –ê –≤—ñ–¥—Ç–∏—Å–∫–∞–Ω–Ω—è –≤ —Å—Ç—ñ–π—Ü—ñ –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω—ñ, —Ç–æ–º—É –º–µ–Ω—é –∑\'—è–≤–∏—Ç—å—Å—è.'
        f' –î–ª—è –µ–ª–µ–º–µ–Ω—Ç—É –≤ —è–∫–æ–≥–æ —î —Ö–æ—á–∞ –± –æ–¥–Ω–µ —É—Å–∫–ª–∞–¥–Ω–µ–Ω–Ω—è –≤–∏—Å–≤—ñ—Ç–∏—Ç—å—Å—è –≤—Å—è –º–µ–Ω—é—à–∫–∞, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ —Ç—ñ —É—Å–∫–ª–∞–¥–Ω–µ–Ω–Ω—è —è–∫—ñ —î –¥–ª—è —Ü—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É.'
        f' –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –∫–∞–ø—ñ—Ç–∞–Ω—Å—å–∫–æ–≥–æ –±—É–¥–µ —É—Å–∫–ª–∞–¥–Ω–µ–Ω–Ω—è "—Ö–≤–∞—Ç" —Ç–∞ "–Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω—ñ". '
        f'–í –∫–∞–ø—ñ—Ç–∞–Ω—Å—å–∫–æ–º—É —É—Å–∫–ª–∞–¥–Ω–µ–Ω–Ω—è —î —Ç—ñ–ª—å–∫–∏ –≤ –≤–∏–≥–ª—è–¥—ñ —Ö–≤–∞—Ç—É, —Ç–æ–º—É "–Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω—ñ" –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –≤ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É.'
        f' –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–æ –±–µ–∑ —É—Å–∫–ª–∞–¥–µ–Ω—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–∫–∞—î—Ç–µ "–ù—ñ—á–æ–≥–æ".'
        f'\n3. –ü—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ñ—Ä—ñ—Å—Ç–∞–π–ª—É –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ö—ñ–Ω–µ—Ü—å —Ñ—Ä—ñ—Å—Ç–∞–π–ª—É". –í—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—ñ—Ö –±–∞–ª—ñ–≤ –∑–∞ –µ–ª–µ–º–µ–Ω—Ç–∏, –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó —ñ —Ç.–¥. (–¶—è –≤–µ—Ä—Å—ñ—è –±–æ—Ç—É —Ä–∞—Ö—É—î –±–∞–ª–∏ –∑–∞)\n'
        f'–Ø–∫—â–æ –≥–æ—Ç–æ–≤—ñ –º–æ–∂–µ—Ç–µ –ø–æ—á–∏–Ω–∞—Ç–∏ –æ–±–∏—Ä–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç', reply_markup=kb.instruction_kb)

def append_ids_to_names(data, start_id=1):
    result = {}
    current_id = start_id
    for group_key, items in data.items():
        result[group_key] = {}
        for name, score in items.items():
            new_name = f"{name}:{current_id}"
            result[group_key][new_name] = score
            current_id += 1
    return result, current_id

static_dynamic_updated, next_id = append_ids_to_names(static_dynamic, start_id=1)
def find_key_by_id_dict(data: dict, target_id: str) -> tuple[str, str] | None:
    for group_name, group in data.items():
        for key in group:
            if key.endswith(f":{target_id}"):
                return group_name, key
    return None


comb_dodanok = []
points_list = []
your_freestyle = []

@router.callback_query(lambda c: c.data == 'stdn_A')
async def stdn_A(callback_query: CallbackQuery):
    builder = InlineKeyboardBuilder()
    for key, values in static_dynamic_updated["stdn_A"].items():
        cb_data = f'{key.split(":")[1]}:{str(values)}'
        key_lower = key.lower()
        key_use = key.split(":")[0]
        if "–≤–∏—Ö—ñ–¥" in key_lower:
            key_use = 'üî∫' + key_use
        elif "–ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è" in key_lower:
            key_use = 'üü†' + key_use
        elif "–≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è" in key_lower:
            key_use = 'üî∑' + key_use
        builder.button(text=key_use.split(":")[0], callback_data=cb_data)
    builder.adjust(2)

    keyboard = builder.as_markup()
    combined_kb = InlineKeyboardMarkup(inline_keyboard=keyboard.inline_keyboard + back_to_stdn_kb.inline_keyboard)
    cleaned_list = [re.sub(r':\d+', '', item).replace("'", "") for item in your_freestyle]
    result_text = '\n'.join(cleaned_list)
    await callback_query.message.edit_text(f'–í–∏—Å—Ç—É–ø:\n{result_text}\n', reply_markup=combined_kb)

@router.callback_query(lambda c: ":" in c.data)
async def choose_element(callback_query: CallbackQuery):
    part1, part2 = callback_query.data.split(":", 1)
    result = find_key_by_id_dict(static_dynamic_updated, part1) #–≤ –ø–∞—Ä—Ç1 –∞–π–¥—ñ –µ–ª–µ–º–µ–Ω—Ç—É
    if result is None:
        await callback_query.message.answer('–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')
        return

    group_name, found_key = result
    letter = group_name.split("_", 1)[1]
    if letter == "A":
        comb_dodanok.append("1")
    else:
        await callback_query.message.edit_text('–ü–æ–º–∏–ª–∫–∞: –ï–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –∂–æ–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª –∑–∞ –∫–æ–º–±—É')
    points_list.append(part2)
    print(points_list)  # –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
    your_freestyle.append(found_key)
    cleaned_list = [re.sub(r':\d+', '', item).replace("'", "") for item in your_freestyle]
    result_text = '\n'.join(cleaned_list)
    await callback_query.message.edit_text(f'–í–∏—Å—Ç—É–ø: \n{result_text}', reply_markup=kb.instruction_kb)


@router.callback_query(lambda c: c.data == 'end_combination')
async def ending_comb(callback_query: CallbackQuery):
    if len(comb_dodanok) > 2:
        summary = sum(int(i) for i in comb_dodanok)
        points_list.append(summary)
    comb_dodanok.clear()
    your_freestyle.append(f"_")
    cleaned_list = [re.sub(r':\d+', '', item).replace("'", "") for item in your_freestyle]
    result_text = '\n'.join(cleaned_list)
    await callback_query.message.edit_text(f'–í–∏—Å—Ç—É–ø: \n{result_text}\n', reply_markup=kb.instruction_kb)

@router.callback_query(lambda c: c.data == 'end_freestyle')
async def ending_freestyle(callback_query: CallbackQuery):
    if len(comb_dodanok) > 2:
        summary_point = sum(int(i) for i in comb_dodanok)
        points_list.append(summary_point)
    plus_minuc = sum(i for i in message_plus_minus)
    points_list.append(plus_minuc)
    summary_point = sum(int(i) for i in points_list)
    cleaned_list = [re.sub(r':\d+', '', item).replace("'", "") for item in your_freestyle]
    result_text = '\n'.join(cleaned_list)
    await callback_query.message.edit_text(f'–í–∏—Å—Ç—É–ø: \n{result_text}\n\n–¢–≤–æ—ó –±–∞–ª–∏: {summary_point}')
    comb_dodanok.clear()
    points_list.clear()
    your_freestyle.clear()
    message_plus_minus.clear()

#@router.callback_query(lambda c: c.data in ['grip', 'on_the_bar', 'nothing'])
#async def if_map_complication(callback_query: CallbackQuery):
#    if callback_query.data == 'grip':
#        last_element = your_freestyle[-1]
#        your_freestyle[-1] = last_element + '|—Ö–≤–∞—Ç'
#        cleaned_list = [re.sub(r':\d+', '', item).replace("'", "") for item in your_freestyle]
#        result_text = '\n'.join(cleaned_list)
#        points_list.append(1)
#        await callback_query.message.edit_text(f'–í–∏—Å—Ç—É–ø: \n{result_text}', reply_markup=kb.instruction_kb)
#    if callback_query.data == 'on_the_bar':
#        last_element = your_freestyle[-1]
#        your_freestyle[-1] = last_element + '|–Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω—ñ'
#        cleaned_list = [re.sub(r':\d+', '', item).replace("'", "") for item in your_freestyle]
#        result_text = '\n'.join(cleaned_list)
#        points_list.append(3)
#        await callback_query.message.edit_text(f'–í–∏—Å—Ç—É–ø: \n{result_text}', reply_markup=kb.instruction_kb)
#    if callback_query.data == 'nothing':
#        cleaned_list = [re.sub(r':\d+', '', item).replace("'", "") for item in your_freestyle]
#        result_text = '\n'.join(cleaned_list)
#        await callback_query.message.edit_text(f'–í–∏—Å—Ç—É–ø: {result_text}', reply_markup=kb.instruction_kb)



@router.callback_query(lambda c: c.data == 'back_to_instruct')
async def back_to_instruct(callback_query: CallbackQuery):
    cleaned_list = [re.sub(r':\d+', '', item).replace("'", "") for item in your_freestyle]
    result_text = '\n'.join(cleaned_list)
    await callback_query.message.edit_text(f'–í–∏—Å—Ç—É–ø: \n{result_text}', reply_markup=kb.instruction_kb)

@router.message()
async def message_handler(message: Message):
    if isinstance(message.text, str):
        print('–¢—Ä—ñ–Ω–≥')
        try:
            number = int(message.text)
            print(number)
            message_plus_minus.append(number)
            print(message_plus_minus)
            await message.answer(f'–ë–∞–ª –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {number}')
        except ValueError:
            print("–ù–µ —á–∏—Å–ª–æ")
    else:
        print('–Ω–µ —Å—Ç—Ä—ñ–Ω–≥')

